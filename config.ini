# This is the configuraton file for the Celo proof system
# manager program. It follows the INI format. This format
# is divided in sections and fields.
# 
# Sections are defined by their headers, which are enclosed
# in square brackets, like [STRUCTURAL SETTINGS] or
# [COMMANDS]. Inside each one of the sections, there are
# fields. Fields have their specific names, like rootLocation
# and compilationCommand, and are separated from their
# values using an = (equal sign) or : (colon). Quotes ARE
# NOT required (and will be read as actual quotes, which is
# usually not the desired behaviour) around strings.
#
# Lines starting with # (hash) or ; (semicolon) are considered
# comments, and thus are ignored by the parser.
#
# Some fields are obligatory, while some are optional. For
# each one of the fields, there is a comment preceding it
# and explaining if it is obligatory or not.
#
# All the section headers must be present in the file so that
# it is correctly compiled.
# 
# This file should ideally be called config.ini, and stored in 
# one of two places (here we are using '/' as the path 
# separator, but it might be different in your system):
#
# * XDGCONFIGDIR/celo where XDGCONFIG is the
#   XDG configuration directory, as returned by the
#   UnliftIO.Directory.getXdgDirectory function. 
#   According to the documentation, this function looks at the 
#   XDG_CONFIG_HOME environment variable, usually
#   ~/.config in POSIX and %APPDATA% on Windows.  
# 
# * @HOMEDIR/.celo@ where @HOMEDIR@ is the user's home
#   directory, as returned by the 'UIOD.getHomeDirectory'
#   function.  
# 
# Alternatively, this file can be called anything else and
# stored anywhere, but its path must be provided to the
# Celo management program using the -c (or --config-file)
# flag. See its documentation for more information. 

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
# Contains the settings that control the in-disk structure
# of the proof system.
[STRUCTURAL SETTINGS]

# OBLIGATORY FIELD
# This field defines the in-disk location of the root
# directory of the proof system.
# Write this path as an absolute path. Do not use short-hand
# notation such as "~" for the user's home directory. If
# possible, avoid using links in the path.
rootLocation = /home/mi/Documents/Projects/PruvaroDemo

# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
# Contains settings that control how external shell commands
# are called by the management program.
# Commands use the substitution syntax defined in the
# SubstitutionParser module.
[COMMANDS]

# OPTIONAL FIELD
# This field defines the command used to compile some
# proof file. It has two substitution arguments:
# * %0 : Absolute (canonical) path of the Discipline Directory
#        where the proof file to be compiled is stored.
# * %1 : The build name of the file to be compiled (see the
#        PathInfo module for the definition and more 
#        on build paths). 
#        For some file whose absolute path is
#        PSROOT/DISCDIR/some/more/directories/File.v, for
#        example, where PSROOT is the absolute path of the
#        proof system root (as defined in the rootLocation 
#        obligatory field), DISCDIR is the name of the
#        Discipline Directory it is in, and "some", "more",
#        and "directories" are some more directories in the
#        path to the file, the build name of this file is
#        ../DISCDIR/some/more/directories/File.vo
#        here, with "/" in all systems, regardless of the
#        system's default path separator.
compilationCommand = make --directory=%0 %1

# OPTIONAL FIELD
# This field defines the command used to build the 
# CoqMakefile, called Makefile.coq. It is used, for example,
# when a new file is added to the project file (a file housed
# in a Discipline Directory, containing all the files that
# should be built). The CoqMakefile is an intermediate
# Makefile, called by the wrapping Makefile (called just
# Makefile), that takes care of the build order for each
# one of the files.
# 
# This command has one subsistution argument:
# * %0 : Absolute (canonical) path of the Discipline Directory
#        where the proof file to be compiled is stored.
buildMakefileCommand = make --directory=%0 Makefile.coq

# OPTIONAL FIELD
# This field defines the command used to build the 
# HTML documentation of proof files. This documentation is
# then housed in the Discipline Directory's "html" 
# subdirectory, with the HTML file of each module being
# simply the full name of the module (starting from the
# root, with "." in place of the directory separator), with
# the file extension ".html".
# 
# This command has one substitution argument:
# * %0 : Absolute (canonical) path of the Discipline Directory
#        where the proof file to be compiled is stored.
docBuildCommand = make --directory=%0 html

# OPTIONAL FIELD
# This field is the location of the directory containing the
# coqc, coqdoc, and coq_makefile binary executables. As with
# the rootLocation field, write this path as an absolute
# path, do not use shorthands such as "~" for the user's
# home directory, and avoid, if possible, links.
# 
# This field is given to the environment as the COQBIN
# environment variable when calling external shell commands.
# This is used, for example, by the coq_makefile executable
# in order to build the CoqMakefile (Makefile.coq).
#
# If set to anything other than an empty string, this will
# overwrite the environment's COQBIN environment variable
# (if there was one in the first place). Setting it to empty
# will leave the environment unchanged. These changes are
# local, affecting only the commands called internally, and
# do not affect the global environment.
#
# If this field is set to empty, and the environment also does
# not have a COQBIN environment variable, then these 
# executables will be looked through the standard PATH.
#
# Notice that to set it to empty, you must write
# coqbinLocation =
# and NOT
# coqbinLocation = ""
# since the later will set it to the string made of open and
# close quotes, instead of the empty string.
coqbinLocation = /home/mi/.local/share/opam/_coq-platform_.2021.02.2/bin/ 
